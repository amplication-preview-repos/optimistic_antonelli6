/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcessedArticle } from "./ProcessedArticle";
import { ProcessedArticleCountArgs } from "./ProcessedArticleCountArgs";
import { ProcessedArticleFindManyArgs } from "./ProcessedArticleFindManyArgs";
import { ProcessedArticleFindUniqueArgs } from "./ProcessedArticleFindUniqueArgs";
import { CreateProcessedArticleArgs } from "./CreateProcessedArticleArgs";
import { UpdateProcessedArticleArgs } from "./UpdateProcessedArticleArgs";
import { DeleteProcessedArticleArgs } from "./DeleteProcessedArticleArgs";
import { ProcessedArticleService } from "../processedArticle.service";
@graphql.Resolver(() => ProcessedArticle)
export class ProcessedArticleResolverBase {
  constructor(protected readonly service: ProcessedArticleService) {}

  async _processedArticlesMeta(
    @graphql.Args() args: ProcessedArticleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcessedArticle])
  async processedArticles(
    @graphql.Args() args: ProcessedArticleFindManyArgs
  ): Promise<ProcessedArticle[]> {
    return this.service.processedArticles(args);
  }

  @graphql.Query(() => ProcessedArticle, { nullable: true })
  async processedArticle(
    @graphql.Args() args: ProcessedArticleFindUniqueArgs
  ): Promise<ProcessedArticle | null> {
    const result = await this.service.processedArticle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcessedArticle)
  async createProcessedArticle(
    @graphql.Args() args: CreateProcessedArticleArgs
  ): Promise<ProcessedArticle> {
    return await this.service.createProcessedArticle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProcessedArticle)
  async updateProcessedArticle(
    @graphql.Args() args: UpdateProcessedArticleArgs
  ): Promise<ProcessedArticle | null> {
    try {
      return await this.service.updateProcessedArticle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcessedArticle)
  async deleteProcessedArticle(
    @graphql.Args() args: DeleteProcessedArticleArgs
  ): Promise<ProcessedArticle | null> {
    try {
      return await this.service.deleteProcessedArticle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
