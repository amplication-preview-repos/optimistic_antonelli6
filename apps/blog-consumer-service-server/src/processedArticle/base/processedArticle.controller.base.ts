/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedArticleService } from "../processedArticle.service";
import { ProcessedArticleCreateInput } from "./ProcessedArticleCreateInput";
import { ProcessedArticle } from "./ProcessedArticle";
import { ProcessedArticleFindManyArgs } from "./ProcessedArticleFindManyArgs";
import { ProcessedArticleWhereUniqueInput } from "./ProcessedArticleWhereUniqueInput";
import { ProcessedArticleUpdateInput } from "./ProcessedArticleUpdateInput";

export class ProcessedArticleControllerBase {
  constructor(protected readonly service: ProcessedArticleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedArticle })
  async createProcessedArticle(
    @common.Body() data: ProcessedArticleCreateInput
  ): Promise<ProcessedArticle> {
    return await this.service.createProcessedArticle({
      data: data,
      select: {
        authorName: true,
        content: true,
        createdAt: true,
        id: true,
        processedAt: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedArticle] })
  @ApiNestedQuery(ProcessedArticleFindManyArgs)
  async processedArticles(
    @common.Req() request: Request
  ): Promise<ProcessedArticle[]> {
    const args = plainToClass(ProcessedArticleFindManyArgs, request.query);
    return this.service.processedArticles({
      ...args,
      select: {
        authorName: true,
        content: true,
        createdAt: true,
        id: true,
        processedAt: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedArticle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedArticle(
    @common.Param() params: ProcessedArticleWhereUniqueInput
  ): Promise<ProcessedArticle | null> {
    const result = await this.service.processedArticle({
      where: params,
      select: {
        authorName: true,
        content: true,
        createdAt: true,
        id: true,
        processedAt: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedArticle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedArticle(
    @common.Param() params: ProcessedArticleWhereUniqueInput,
    @common.Body() data: ProcessedArticleUpdateInput
  ): Promise<ProcessedArticle | null> {
    try {
      return await this.service.updateProcessedArticle({
        where: params,
        data: data,
        select: {
          authorName: true,
          content: true,
          createdAt: true,
          id: true,
          processedAt: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedArticle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedArticle(
    @common.Param() params: ProcessedArticleWhereUniqueInput
  ): Promise<ProcessedArticle | null> {
    try {
      return await this.service.deleteProcessedArticle({
        where: params,
        select: {
          authorName: true,
          content: true,
          createdAt: true,
          id: true,
          processedAt: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
