/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProcessedArticle as PrismaProcessedArticle,
} from "@prisma/client";

export class ProcessedArticleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedArticleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedArticle.count(args);
  }

  async processedArticles(
    args: Prisma.ProcessedArticleFindManyArgs
  ): Promise<PrismaProcessedArticle[]> {
    return this.prisma.processedArticle.findMany(args);
  }
  async processedArticle(
    args: Prisma.ProcessedArticleFindUniqueArgs
  ): Promise<PrismaProcessedArticle | null> {
    return this.prisma.processedArticle.findUnique(args);
  }
  async createProcessedArticle(
    args: Prisma.ProcessedArticleCreateArgs
  ): Promise<PrismaProcessedArticle> {
    return this.prisma.processedArticle.create(args);
  }
  async updateProcessedArticle(
    args: Prisma.ProcessedArticleUpdateArgs
  ): Promise<PrismaProcessedArticle> {
    return this.prisma.processedArticle.update(args);
  }
  async deleteProcessedArticle(
    args: Prisma.ProcessedArticleDeleteArgs
  ): Promise<PrismaProcessedArticle> {
    return this.prisma.processedArticle.delete(args);
  }
}
